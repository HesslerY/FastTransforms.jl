var documenterSearchIndex = {"docs":
[{"location":"#FastTransforms.jl-Documentation-1","page":"Home","title":"FastTransforms.jl Documentation","text":"","category":"section"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.jl allows the user to conveniently work with orthogonal polynomials with degrees well into the millions.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package provides a Julia wrapper for the C library of the same name. Additionally, all three types of nonuniform fast Fourier transforms available, as well as the Padua transform.","category":"page"},{"location":"#Fast-orthogonal-polynomial-transforms-1","page":"Home","title":"Fast orthogonal polynomial transforms","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For this documentation, please see the documentation for FastTransforms. Most transforms have separate forward and inverse plans. In some instances, however, the inverse is in the sense of least-squares, and therefore only the forward transform is planned.","category":"page"},{"location":"#Nonuniform-fast-Fourier-transforms-1","page":"Home","title":"Nonuniform fast Fourier transforms","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"nufft1","category":"page"},{"location":"#FastTransforms.nufft1","page":"Home","title":"FastTransforms.nufft1","text":"Computes a nonuniform fast Fourier transform of type I:\n\nf_j = sum_k=0^N-1 c_k e^-2pirm i fracjN omega_kquadrm forquad 0 le j le N-1\n\n\n\n\n\nComputes a 2D nonuniform fast Fourier transform of type I-I:\n\nF_ij = sum_k=0^M-1sum_ell=0^N-1 C_kell e^-2pirm i (fraciM omega_k + fracjN pi_ell)quadrm forquad 0 le i le M-1quad 0 le j le N-1\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"nufft2","category":"page"},{"location":"#FastTransforms.nufft2","page":"Home","title":"FastTransforms.nufft2","text":"Computes a nonuniform fast Fourier transform of type II:\n\nf_j = sum_k=0^N-1 c_k e^-2pirm i x_j kquadrm forquad 0 le j le N-1\n\n\n\n\n\nComputes a 2D nonuniform fast Fourier transform of type II-II:\n\nF_ij = sum_k=0^M-1sum_ell=0^N-1 C_kell e^-2pirm i (x_i k + y_j ell)quadrm forquad 0 le i le M-1quad 0 le j le N-1\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"nufft3","category":"page"},{"location":"#FastTransforms.nufft3","page":"Home","title":"FastTransforms.nufft3","text":"Computes a nonuniform fast Fourier transform of type III:\n\nf_j = sum_k=0^N-1 c_k e^-2pirm i x_j omega_kquadrm forquad 0 le j le N-1\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"inufft1","category":"page"},{"location":"#FastTransforms.inufft1","page":"Home","title":"FastTransforms.inufft1","text":"Computes an inverse nonuniform fast Fourier transform of type I.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"inufft2","category":"page"},{"location":"#FastTransforms.inufft2","page":"Home","title":"FastTransforms.inufft2","text":"Computes an inverse nonuniform fast Fourier transform of type II.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"paduatransform","category":"page"},{"location":"#FastTransforms.paduatransform","page":"Home","title":"FastTransforms.paduatransform","text":"Padua Transform maps from interpolant values at the Padua points to the 2D Chebyshev coefficients.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"ipaduatransform","category":"page"},{"location":"#FastTransforms.ipaduatransform","page":"Home","title":"FastTransforms.ipaduatransform","text":"Inverse Padua Transform maps the 2D Chebyshev coefficients to the values of the interpolation polynomial at the Padua points.\n\n\n\n\n\n","category":"function"},{"location":"#Other-Exported-Methods-1","page":"Home","title":"Other Exported Methods","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"gaunt","category":"page"},{"location":"#FastTransforms.gaunt","page":"Home","title":"FastTransforms.gaunt","text":"Calculates the Gaunt coefficients, defined by:\n\na(mnmunuq) = frac2(n+nu-2q)+12 frac(n+nu-2q-m-mu)(n+nu-2q+m+mu) int_-1^+1 P_n^m(x) P_nu^mu(x) P_n+nu-2q^m+mu(x) rmdx\n\nor defined by:\n\nP_n^m(x) P_nu^mu(x) = sum_q=0^q_rm max a(mnmunuq) P_n+nu-2q^m+mu(x)\n\nThis is a Julia implementation of the stable recurrence described in:\n\nY.-l. Xu, Fast evaluation of Gaunt coefficients: recursive approach, J. Comp. Appl. Math., 85:53‚Äì65, 1997.\n\n\n\n\n\nCalculates the Gaunt coefficients in 64-bit floating-point arithmetic.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"paduapoints","category":"page"},{"location":"#FastTransforms.paduapoints","page":"Home","title":"FastTransforms.paduapoints","text":"Returns coordinates of the (n+1)(n+2)2 Padua points.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"sphevaluate","category":"page"},{"location":"#FastTransforms.sphevaluate","page":"Home","title":"FastTransforms.sphevaluate","text":"Pointwise evaluation of real orthonormal spherical harmonic:\n\nY_ell^m(thetavarphi) = (-1)^msqrt(ell+frac12)frac(ell-m)(ell+m) P_ell^m(costheta) sqrtfrac2-delta_m02pi leftbeginarrayccc cos mvarphi  rm for  m ge 0 sin(-mvarphi)  rm for  m  0endarrayright\n\n\n\n\n\n","category":"function"},{"location":"#Internal-Methods-1","page":"Home","title":"Internal Methods","text":"","category":"section"},{"location":"#Miscellaneous-Special-Functions-1","page":"Home","title":"Miscellaneous Special Functions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.half","category":"page"},{"location":"#FastTransforms.half","page":"Home","title":"FastTransforms.half","text":"Compute a typed 0.5.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.two","category":"page"},{"location":"#FastTransforms.two","page":"Home","title":"FastTransforms.two","text":"Compute a typed 2.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.Œ¥","category":"page"},{"location":"#FastTransforms.Œ¥","page":"Home","title":"FastTransforms.Œ¥","text":"The Kronecker delta function:\n\ndelta_kj = leftbeginarrayccc 1  rm for  k = j 0  rm for  k ne jendarrayright\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.Œõ","category":"page"},{"location":"#FastTransforms.Œõ","page":"Home","title":"FastTransforms.Œõ","text":"The Lambda function Lambda(z) = fracGamma(z+frac12)Gamma(z+1) for the ratio of gamma functions.\n\n\n\n\n\nFor 64-bit floating-point arithmetic, the Lambda function uses the asymptotic series for tau in Appendix B of\n\nI. Bogaert and B. Michiels and J. Fostier, ùí™(1) computation of Legendre polynomials and Gauss‚ÄìLegendre nodes and weights for parallel computing, SIAM J. Sci. Comput., 34:C83‚ÄìC101, 2012.\n\n\n\n\n\nThe Lambda function Lambda(zŒª‚ÇÅŒª‚ÇÇ) = fracGamma(z+lambda_1)Œì(z+lambda_2) for the ratio of gamma functions.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.lambertw","category":"page"},{"location":"#FastTransforms.lambertw","page":"Home","title":"FastTransforms.lambertw","text":"The principal branch of the Lambert-W function, defined by x = W_0(x) e^W_0(x), computed using Halley's method for x in -e^-1infty).\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.pochhammer","category":"page"},{"location":"#FastTransforms.pochhammer","page":"Home","title":"FastTransforms.pochhammer","text":"Pochhammer symbol (x)_n = fracGamma(x+n)Gamma(x) for the rising factorial.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.stirlingseries","category":"page"},{"location":"#FastTransforms.stirlingseries","page":"Home","title":"FastTransforms.stirlingseries","text":"Stirling's asymptotic series for Gamma(z).\n\n\n\n\n\n","category":"function"},{"location":"#Modified-Chebyshev-Moment-Based-Quadrature-1","page":"Home","title":"Modified Chebyshev Moment-Based Quadrature","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.clenshawcurtisnodes","category":"page"},{"location":"#FastTransforms.clenshawcurtisnodes","page":"Home","title":"FastTransforms.clenshawcurtisnodes","text":"Compute nodes of the Clenshaw‚ÄîCurtis quadrature rule.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.clenshawcurtisweights","category":"page"},{"location":"#FastTransforms.clenshawcurtisweights","page":"Home","title":"FastTransforms.clenshawcurtisweights","text":"Compute weights of the Clenshaw‚ÄîCurtis quadrature rule with modified Chebyshev moments of the first kind mu.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.fejernodes1","category":"page"},{"location":"#FastTransforms.fejernodes1","page":"Home","title":"FastTransforms.fejernodes1","text":"Compute nodes of Fejer's first quadrature rule.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.fejerweights1","category":"page"},{"location":"#FastTransforms.fejerweights1","page":"Home","title":"FastTransforms.fejerweights1","text":"Compute weights of Fejer's first quadrature rule with modified Chebyshev moments of the first kind mu.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.fejernodes2","category":"page"},{"location":"#FastTransforms.fejernodes2","page":"Home","title":"FastTransforms.fejernodes2","text":"Compute nodes of Fejer's second quadrature rule.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.fejerweights2","category":"page"},{"location":"#FastTransforms.fejerweights2","page":"Home","title":"FastTransforms.fejerweights2","text":"Compute weights of Fejer's second quadrature rule with modified Chebyshev moments of the second kind mu.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevmoments1","category":"page"},{"location":"#FastTransforms.chebyshevmoments1","page":"Home","title":"FastTransforms.chebyshevmoments1","text":"Modified Chebyshev moments of the first kind:\n\n    int_-1^+1 T_n(x) rmdx\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevjacobimoments1","category":"page"},{"location":"#FastTransforms.chebyshevjacobimoments1","page":"Home","title":"FastTransforms.chebyshevjacobimoments1","text":"Modified Chebyshev moments of the first kind with respect to the Jacobi weight:\n\n    int_-1^+1 T_n(x) (1-x)^alpha(1+x)^betarmdx\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevlogmoments1","category":"page"},{"location":"#FastTransforms.chebyshevlogmoments1","page":"Home","title":"FastTransforms.chebyshevlogmoments1","text":"Modified Chebyshev moments of the first kind with respect to the logarithmic weight:\n\n    int_-1^+1 T_n(x) logleft(frac1-x2right)rmdx\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevmoments2","category":"page"},{"location":"#FastTransforms.chebyshevmoments2","page":"Home","title":"FastTransforms.chebyshevmoments2","text":"Modified Chebyshev moments of the second kind:\n\n    int_-1^+1 U_n(x) rmdx\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevjacobimoments2","category":"page"},{"location":"#FastTransforms.chebyshevjacobimoments2","page":"Home","title":"FastTransforms.chebyshevjacobimoments2","text":"Modified Chebyshev moments of the second kind with respect to the Jacobi weight:\n\n    int_-1^+1 U_n(x) (1-x)^alpha(1+x)^betarmdx\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"FastTransforms.chebyshevlogmoments2","category":"page"},{"location":"#FastTransforms.chebyshevlogmoments2","page":"Home","title":"FastTransforms.chebyshevlogmoments2","text":"Modified Chebyshev moments of the second kind with respect to the logarithmic weight:\n\n    int_-1^+1 U_n(x) logleft(frac1-x2right)rmdx\n\n\n\n\n\n","category":"function"}]
}
